// --- HYPER GENERATED CODE %VERSION% 1636762539 ---
//
// WARNING
//
// This file was automatically generated by the Hyper Platform.
// Manual changes MUST NOT be made, consult documentation at hyper.ag for more
// information.

#ifndef __HYPER_DEVICE_CLASS_12_H__
#define __HYPER_DEVICE_CLASS_12_H__


#include <stdint.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include <string.h>

#include "cmp.h"

#define HYPER_DEVICE_12_ATTRIBUTES_COUNT 7



// --- DEVICE TYPE ---

typedef struct {
  uint8_t version;
  uint32_t device_class_id;
  uint8_t device_id[6];
  

  uint8_t environment_temperature_set : 1;
  float environment_temperature;
  uint8_t humidity_set : 1;
  float humidity;
  uint8_t illuminance_set : 1;
  float illuminance;
  uint8_t firmware_version_size;
  uint8_t * firmware_version;
  uint8_t reboot_set : 1;
  bool reboot;
  uint8_t uptime_set : 1;
  uint64_t uptime;
  uint8_t publish_interval_set : 1;
  uint16_t publish_interval;
  
  void (*on_reboot_update)(bool);
  void (*on_publish_interval_update)(uint16_t);
} hyper_device_12_t;

// --- MSGPACK HELPERS ---


typedef struct {
  uint8_t *buf;
  size_t offset;
} hyper_device_12_msgpack_t;

static bool hyper_device_12_msgpack_reader(cmp_ctx_t *ctx, void *data, size_t count) {
  hyper_device_12_msgpack_t *msgpack = (hyper_device_12_msgpack_t *)ctx->buf;
  memcpy(data, msgpack->buf + msgpack->offset, count);
  msgpack->offset += count;
  return true;
}

static size_t hyper_device_12_msgpack_writer(cmp_ctx_t *ctx, const void *data, size_t count) {
  hyper_device_12_msgpack_t *msgpack = (hyper_device_12_msgpack_t *)ctx->buf;
  memcpy(msgpack->buf + msgpack->offset, data, count);
  msgpack->offset += count;

  return count;
}

static void hyper_device_12_error_and_exit(const char *msg) {
    fprintf(stderr, "%s\n\n", msg);
    exit(EXIT_FAILURE);
}


void hyper_device_12_init(hyper_device_12_t * device, uint8_t device_id[6]) {
  device->version = 2;
  device->device_class_id = 12;
  memcpy(device->device_id, device_id, 6);


  device->environment_temperature_set = 0;
  device->environment_temperature = 0.0;
  device->humidity_set = 0;
  device->humidity = 0.0;
  device->illuminance_set = 0;
  device->illuminance = 0.0;
  device->firmware_version_size = 0;
  device->firmware_version = NULL;
  device->reboot_set = 0;
  device->reboot = false;
  device->uptime_set = 0;
  device->uptime = 0;
  device->publish_interval_set = 0;
  device->publish_interval = 0;

  device->on_reboot_update = NULL;
  device->on_publish_interval_update = NULL;
}



// --- PRINT DEVICE ---

void hyper_device_12_pp(hyper_device_12_t * device) {

      printf("(hyper_device_12_t\n"
              "  (version %d)\n"
              "  (device_class_id %lu)\n"
              "  (device_id (%02x %02x %02x %02x %02x %02x))\n",
              device->version, (long unsigned)device->device_class_id, device->device_id[0],
              device->device_id[1], device->device_id[2], device->device_id[3],
              device->device_id[4], device->device_id[5]);
      

      if (device->environment_temperature_set) {
        printf("  (environment_temperature (f32 %f))\n", device->environment_temperature);
      } else {
        printf("  (environment_temperature (f32 none))\n");
      }

      if (device->humidity_set) {
        printf("  (humidity (f32 %f))\n", device->humidity);
      } else {
        printf("  (humidity (f32 none))\n");
      }

      if (device->illuminance_set) {
        printf("  (illuminance (f32 %f))\n", device->illuminance);
      } else {
        printf("  (illuminance (f32 none))\n");
      }

      if (device->firmware_version_size > 0) {
        printf("  (firmware_version ((data %u)", device->firmware_version_size);
        for (uint8_t i = 0; i < device->firmware_version_size; i += 1) {
          printf(" %02x", device->firmware_version[i]);
        };
        printf("))\n");
      } else {
        printf("  (firmware_version (data<0> none))\n");
      }
      

      if (device->reboot_set) {
        printf("  (reboot (bool %d))\n", device->reboot);
      } else {
        printf("  (reboot (bool none))\n");
      }

      if (device->uptime_set) {
        printf("  (uptime (u64 %llu))\n", device->uptime);
      } else {
        printf("  (uptime (u64 none))\n");
      }

      if (device->publish_interval_set) {
        printf("  (publish_interval (u16 %u))\n", device->publish_interval);
      } else {
        printf("  (publish_interval (u16 none))\n");
      }

      printf("\b)\n");
    
}



// --- BIND ATTRIBUTES ---

void hyper_device_12_bind_reboot(hyper_device_12_t * device, void (*callback)(bool)) {
  device->on_reboot_update = callback;
}


void hyper_device_12_bind_publish_interval(hyper_device_12_t * device, void (*callback)(uint16_t)) {
  device->on_publish_interval_update = callback;
}



// --- SET ATTRIBUTES ---

void hyper_device_12_set_environment_temperature(hyper_device_12_t * device, float value) {
  device->environment_temperature_set = 1;
  device->environment_temperature = value;
}


void hyper_device_12_set_humidity(hyper_device_12_t * device, float value) {
  device->humidity_set = 1;
  device->humidity = value;
}


void hyper_device_12_set_illuminance(hyper_device_12_t * device, float value) {
  device->illuminance_set = 1;
  device->illuminance = value;
}


void hyper_device_12_set_firmware_version(hyper_device_12_t * device, uint8_t * value, uint8_t value_size) {
  device->firmware_version_size = value_size;
  device->firmware_version = value;
}


void hyper_device_12_set_reboot(hyper_device_12_t * device, bool value) {
  device->reboot_set = 1;
  device->reboot = value;
}


void hyper_device_12_set_uptime(hyper_device_12_t * device, uint64_t value) {
  device->uptime_set = 1;
  device->uptime = value;
}


void hyper_device_12_set_publish_interval(hyper_device_12_t * device, uint16_t value) {
  device->publish_interval_set = 1;
  device->publish_interval = value;
}



// --- ENCODE DEVICE ---

uint8_t hyper_device_12_encode(hyper_device_12_t * device, uint8_t * out) {
  cmp_ctx_t cmp_ctx = {0};
  hyper_device_12_msgpack_t msgpack = {out, 0};

  cmp_init(&cmp_ctx, (void *)&msgpack, NULL, NULL, hyper_device_12_msgpack_writer);

  // Encode message as array of elements.
  if (!cmp_write_array(&cmp_ctx, 3)) {
    hyper_device_12_error_and_exit(cmp_strerror(&cmp_ctx));
  }

  // Device info.
  if (!cmp_write_u32(&cmp_ctx, device->device_class_id)) {
    hyper_device_12_error_and_exit(cmp_strerror(&cmp_ctx));
  }

  if (!cmp_write_bin(&cmp_ctx, device->device_id, 6)) {
    hyper_device_12_error_and_exit(cmp_strerror(&cmp_ctx));
  }

  // Attributes
  if (!cmp_write_array(&cmp_ctx, HYPER_DEVICE_12_ATTRIBUTES_COUNT)) {
    hyper_device_12_error_and_exit(cmp_strerror(&cmp_ctx));
  }


  if (device->environment_temperature_set) {
    if (!cmp_write_float(&cmp_ctx, device->environment_temperature)) {
      hyper_device_12_error_and_exit(cmp_strerror(&cmp_ctx));
    }
  } else {
    if (!cmp_write_nil(&cmp_ctx)) {
      hyper_device_12_error_and_exit(cmp_strerror(&cmp_ctx));
    }
  }

  if (device->humidity_set) {
    if (!cmp_write_float(&cmp_ctx, device->humidity)) {
      hyper_device_12_error_and_exit(cmp_strerror(&cmp_ctx));
    }
  } else {
    if (!cmp_write_nil(&cmp_ctx)) {
      hyper_device_12_error_and_exit(cmp_strerror(&cmp_ctx));
    }
  }

  if (device->illuminance_set) {
    if (!cmp_write_float(&cmp_ctx, device->illuminance)) {
      hyper_device_12_error_and_exit(cmp_strerror(&cmp_ctx));
    }
  } else {
    if (!cmp_write_nil(&cmp_ctx)) {
      hyper_device_12_error_and_exit(cmp_strerror(&cmp_ctx));
    }
  }


    if (device->firmware_version_size > 0) {
    if (!cmp_write_bin(&cmp_ctx, device->firmware_version, device->firmware_version_size)) {
      hyper_device_12_error_and_exit(cmp_strerror(&cmp_ctx));
    }
  } else {
    if (!cmp_write_nil(&cmp_ctx)) {
      hyper_device_12_error_and_exit(cmp_strerror(&cmp_ctx));
    }
  }

  if (device->reboot_set) {
    if (!cmp_write_bool(&cmp_ctx, device->reboot)) {
      hyper_device_12_error_and_exit(cmp_strerror(&cmp_ctx));
    }
  } else {
    if (!cmp_write_nil(&cmp_ctx)) {
      hyper_device_12_error_and_exit(cmp_strerror(&cmp_ctx));
    }
  }

  if (device->uptime_set) {
    if (!cmp_write_u64(&cmp_ctx, device->uptime)) {
      hyper_device_12_error_and_exit(cmp_strerror(&cmp_ctx));
    }
  } else {
    if (!cmp_write_nil(&cmp_ctx)) {
      hyper_device_12_error_and_exit(cmp_strerror(&cmp_ctx));
    }
  }

  if (device->publish_interval_set) {
    if (!cmp_write_u16(&cmp_ctx, device->publish_interval)) {
      hyper_device_12_error_and_exit(cmp_strerror(&cmp_ctx));
    }
  } else {
    if (!cmp_write_nil(&cmp_ctx)) {
      hyper_device_12_error_and_exit(cmp_strerror(&cmp_ctx));
    }
  }
  return msgpack.offset;
}



// --- DECODE DEVICE ---

uint8_t hyper_device_12_decode(hyper_device_12_t * device, uint8_t * in, uint8_t in_size) {
  cmp_ctx_t cmp_ctx = {0};
  hyper_device_12_msgpack_t msgpack = {in, 0};

  cmp_init(&cmp_ctx, (void *)&msgpack, hyper_device_12_msgpack_reader, NULL, NULL);
      
  uint32_t msg_array_size = 0;

  // Main msg array
  if (!cmp_read_array(&cmp_ctx, &msg_array_size) && msg_array_size != 3) {
    hyper_device_12_error_and_exit(cmp_strerror(&cmp_ctx));
  }
  printf("hyper_device_decode: msg_array_size=%lu\n", (long unsigned)msg_array_size);

  cmp_object_t obj;
  // Device class id
  if (!cmp_read_object(&cmp_ctx, &obj)) {
    hyper_device_12_error_and_exit("could not read object");
  }
  if (!cmp_object_as_uint(&obj, &device->device_class_id)) {
    hyper_device_12_error_and_exit("could not read device_class_id\n");
  }

  // Device id
  uint32_t device_id_size = 0;
  if (!cmp_read_bin_size(&cmp_ctx, &device_id_size)) {
    hyper_device_12_error_and_exit(cmp_strerror(&cmp_ctx));
  }

  if (device_id_size != 6) {
    hyper_device_12_error_and_exit("hyper_device_decode: wrong device_id_size\n");
  }

  memcpy(device->device_id, in + msgpack.offset, 6);
  msgpack.offset += 6;

  // Attributes
  uint32_t attributes_array_size = 0;
  if (!cmp_read_array(&cmp_ctx, &attributes_array_size) && attributes_array_size != HYPER_DEVICE_12_ATTRIBUTES_COUNT) {
    hyper_device_12_error_and_exit(cmp_strerror(&cmp_ctx));
  }

    

  if (!cmp_read_object(&cmp_ctx, &obj)) {
    hyper_device_12_error_and_exit("could not read object");
  }
  if (!cmp_object_is_nil(&obj)) {
    if (cmp_object_as_float(&obj, &device->environment_temperature)) {
      device->environment_temperature_set = 1; 
    } else {
      hyper_device_12_error_and_exit("could not read value\n");
    }
  }

  if (!cmp_read_object(&cmp_ctx, &obj)) {
    hyper_device_12_error_and_exit("could not read object");
  }
  if (!cmp_object_is_nil(&obj)) {
    if (cmp_object_as_float(&obj, &device->humidity)) {
      device->humidity_set = 1; 
    } else {
      hyper_device_12_error_and_exit("could not read value\n");
    }
  }

  if (!cmp_read_object(&cmp_ctx, &obj)) {
    hyper_device_12_error_and_exit("could not read object");
  }
  if (!cmp_object_is_nil(&obj)) {
    if (cmp_object_as_float(&obj, &device->illuminance)) {
      device->illuminance_set = 1; 
    } else {
      hyper_device_12_error_and_exit("could not read value\n");
    }
  }

    if (!cmp_read_object(&cmp_ctx, &obj)) {
    hyper_device_12_error_and_exit("could not read object");
  }
  if (!cmp_object_is_nil(&obj)) {
    // TODO: check if size > max size
    if (cmp_object_as_bin(&obj, (uint32_t *)&device->firmware_version_size)) {
      memcpy(device->firmware_version, in + msgpack.offset, device->firmware_version_size);
      msgpack.offset += device->firmware_version_size;
    } else {
      hyper_device_12_error_and_exit("could not read value\n");
    }
  }
         

  if (!cmp_read_object(&cmp_ctx, &obj)) {
    hyper_device_12_error_and_exit("could not read object");
  }
  if (!cmp_object_is_nil(&obj)) {
    if (cmp_object_as_bool(&obj, &device->reboot)) {
      device->reboot_set = 1; 
    } else {
      hyper_device_12_error_and_exit("could not read value\n");
    }
  }

  if (!cmp_read_object(&cmp_ctx, &obj)) {
    hyper_device_12_error_and_exit("could not read object");
  }
  if (!cmp_object_is_nil(&obj)) {
    if (cmp_object_as_ulong(&obj, &device->uptime)) {
      device->uptime_set = 1; 
    } else {
      hyper_device_12_error_and_exit("could not read value\n");
    }
  }

  if (!cmp_read_object(&cmp_ctx, &obj)) {
    hyper_device_12_error_and_exit("could not read object");
  }
  if (!cmp_object_is_nil(&obj)) {
    if (cmp_object_as_ushort(&obj, &device->publish_interval)) {
      device->publish_interval_set = 1; 
    } else {
      hyper_device_12_error_and_exit("could not read value\n");
    }
  }
  return msgpack.offset;
}



// --- DISPATCH DEVICE ---

void hyper_device_12_dispatch(hyper_device_12_t * device) {

      if (device->on_reboot_update && device->reboot_set) {
        device->on_reboot_update(device->reboot);
      }

      if (device->on_publish_interval_update && device->publish_interval_set) {
        device->on_publish_interval_update(device->publish_interval);
      }
}



#endif